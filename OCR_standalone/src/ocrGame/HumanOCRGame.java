package ocrGame;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Random;
import java.util.TimerTask;
import java.util.Timer;
import javax.swing.JOptionPane;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

public class HumanOCRGame extends javax.swing.JFrame {

    public static int animationFrame = 0;
    public static int tankAnimationFrame = 0;
    public static int victoryAnimationFrame = 0;
    public static int waitVictory=0;
    public static int totalWaitVictory=65;

    public boolean flagFinalAnimation=false;
    
    public String[] listKnown = new String[]{"User","are","for","of","process","techniques","ranging","informal","to","laboratory","studies.","often","practitioners","to","off","between","time","and","monetary","such","Amazon's","Mechanical","offer","a","paradigm","for","a","number","for","time","Here","of","a","market","collecting","discuss","design","developing","micro","tasks.","Although","micro-task","great","potential","measurements","costs,","order","harness","the","capabilities","approach."};
    public String[] fileNamesKnown = new String[]{"01-01.png","01-03.png","01-05.png","01-08.png","02-01.png","02-04.png","02-05.png","02-07.png","03-02.png","03-04.png","03-05.png","04-05.png","04-07.png","04-08.png","05-02.png","05-03.png","05-06.png","05-08.png","06-01.png","06-05.png","06-07.png","07-01.png","07-03.png","07-04.png","07-06.png","07-07.png","07-09.png","08-02.png","08-05.png","08-07.png","08-11.png","09-05.png","09-06.png","09-08.png","10-01.png","10-05.png","10-06.png","11-03.png","11-05.png","12-01.png","12-02.png","12-03.png","12-06.png","12-07.png","13-04.png","13-07.png","14-10.png","15-01.png","15-02.png","15-03.png","15-06.png"};

    public String[] fileNamesUnknown = new String[]{"01-02.png","01-04.png","01-06.png","01-07.png","01-09.png"};
    //public String[] fileNamesUnknown = new String[]{"01-02.png","01-04.png","01-06.png","01-07.png","01-09.png","01-10.png","02-02.png","02-03.png","02-06.png","03-01.png","03-03.png","03-06.png","03-07.png","03-08.png","04-01.png","04-02.png","04-03.png","04-04.png","04-06.png","05-01.png","05-04.png","05-05.png","05-07.png","06-02.png","06-03.png","06-04.png","06-06.png","07-02.png","07-05.png","07-08.png","08-01.png","08-03.png","08-04.png","08-06.png","08-08.png","08-09.png","08-10.png","09-01.png","09-02.png","09-03.png","09-04.png","09-07.png","09-09.png","10-02.png","10-03.png","10-04.png","11-01.png","11-02.png","11-04.png","11-06.png","11-07.png","12-04.png","12-05.png","12-08.png","13-01.png","13-02.png","13-03.png","13-05.png","13-06.png","13-08.png","13-09.png","14-01.png","14-02.png","14-03.png","14-04.png","14-05.png","14-06.png","14-07.png","14-08.png","14-09.png","14-11.png","15-04.png","15-05.png"};
    
    public String[] listUnknown=new String[fileNamesUnknown.length];;
    
    public static int actualPositionKnown=0;
    public static int actualPositionUknown=0;
    
    public static TimerTask timerTask;
    public static TimerTask timerTask2;
    
    public static Clip clip;
    
    public static String pathToSave="";
    
    /**
     * Creates new form HumanOCRGame
     */
    public HumanOCRGame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabelKnown = new javax.swing.JLabel();
        jLabelUnknown = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabelPoints = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/tank--0-.gif"))); // NOI18N

        jLabel3.setBackground(new java.awt.Color(0, 204, 204));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/b2.jpg"))); // NOI18N
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jLabel3.setOpaque(true);

        jButton1.setText("Start game");
        jButton1.setEnabled(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("Words:");

        jLabel7.setText("User input:");

        jTextField1.setEnabled(false);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabelPoints.setFont(new java.awt.Font("Tahoma", 0, 22)); // NOI18N
        jLabelPoints.setForeground(new java.awt.Color(255, 255, 0));

        jButton2.setText("Save output...");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelKnown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelUnknown)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabelKnown)
                    .addComponent(jLabelUnknown)
                    .addComponent(jLabelPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {                                      
        
        if (jButton1.isEnabled()){
            jTextField1.setEnabled(true);
            jLabel1.setBounds(180, 300, 128,128);
            jLabel2.setBounds(900, 350,153, 106);
            
            jLabelPoints.setBounds(850, 50, jLabelPoints.getWidth(), jLabelPoints.getHeight());
                  //Animation done by timer
		timerTask = new TimerTask() 
	     { 
	         public void run()  
	         { 
                    try {
                        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/mmx--"+animationFrame+"-.gif")));
                        jLabel1.setBounds(180+(int)((720/fileNamesUnknown.length)*actualPositionUknown), 300, 128, 128);
                        
                        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/tank--"+tankAnimationFrame+"-.gif")));
                        jLabel2.setBounds(900, 350,153,106);
                        
                        jLabelPoints.setBounds(850, 50, jLabelPoints.getWidth(), jLabelPoints.getHeight());
                        jLabelPoints.setText("Correct: "+actualPositionUknown+" of "+fileNamesUnknown.length);
                        
                        
	     		} catch (Exception e) {
	     			e.printStackTrace();
	     		}
                        animationFrame++;
                        animationFrame = animationFrame%5;
                        
                        tankAnimationFrame++;
                        tankAnimationFrame=tankAnimationFrame%4;
	         } 
	     }; 
 
	     Timer timer = new Timer(); 
         timer.scheduleAtFixedRate(timerTask, 0, 100);
         
         //music
        // Sound
	try {
            AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("mmx.wav"));
            clip = AudioSystem.getClip();
            clip.open(audioInputStream);
            clip.start();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
         
         //Set up initial Images
         
         jLabelKnown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/known/"+fileNamesKnown[actualPositionKnown])));
         jLabelUnknown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/unknown/"+fileNamesUnknown[actualPositionUknown])));
         
         //verify data
         if (fileNamesKnown.length!=listKnown.length){
             JOptionPane.showMessageDialog(this,"Error in data of known words","Problem in lists",JOptionPane.ERROR_MESSAGE);
         }
         
        }
        jButton1.setEnabled(false);
        
    }                                     

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {                                            
        //Performed while enter
        
        if (actualPositionUknown<fileNamesUnknown.length){
            
            try{
                String[] splittedString = jTextField1.getText().split(" ");
                System.out.println(jTextField1.getText());
                
                
                int sizeOfsplittedString=splittedString.length;
                System.out.println(sizeOfsplittedString);
                
                if (sizeOfsplittedString!=2){
                    //Used did not input 2 words. Throws exception
                    throw new IndexOutOfBoundsException();
                }
					
                String word1=splittedString[0];
                String word2=splittedString[1];
            
                if (word1.equals(listKnown[actualPositionKnown])){
                    //word 1 match
                    listUnknown[actualPositionUknown]=word2;
                    actualPositionUknown++;
                    
                    jLabel1.setBounds(180+(int)((720/fileNamesUnknown.length)*actualPositionUknown), 300, 128,128);
                    
                
                    if (actualPositionUknown==fileNamesUnknown.length){
                        //User won the game
                        jLabel2.setVisible(false);
                        JOptionPane.showMessageDialog(this,"You won the game!");
                        
                        clip.stop();
                        
                        jTextField1.setEnabled(false);
                        timerTask.cancel();
                        
                        //save to txt file
                        try {
                            File file = new File(pathToSave);
                            FileWriter fileWriter = new FileWriter(file);
                            for (int w=0;w<fileNamesUnknown.length;w++){
                		fileWriter.write(fileNamesUnknown[w]+" "+listUnknown[w]);
                		fileWriter.write(System.getProperty( "line.separator" ));
                            }
                			
                            fileWriter.flush();
                            fileWriter.close();
                	} catch (IOException e) {
                            e.printStackTrace();
                	}
                        
						//Winning sounds
						try{ //TODO: Add sound clips if want to add sound when clicking.
							AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File("victory.wav"));
							    clip = AudioSystem.getClip();
							    clip.open(audioInputStream);
							    clip.start();
						}
						catch(Exception ex)
						{
							ex.printStackTrace();
						}
						
                        
                        
                        timerTask2 = new TimerTask() { 
               	         public void run()  
               	         { 
                                   try {
                                	   
                                	   if (waitVictory<totalWaitVictory){
                                		   jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/victory0.gif")));
                                	   }else{
                                		   jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mmxAnimation/victory"+victoryAnimationFrame+".gif")));
                                		   victoryAnimationFrame++;
                                           victoryAnimationFrame = victoryAnimationFrame%7;
                                           flagFinalAnimation=true;
                                	   }
                                       
                                       jLabel1.setBounds(180+(int)((720/fileNamesUnknown.length)*actualPositionUknown), 300, 128, 128);
                                       
                                       jLabelPoints.setText("Correct: "+actualPositionUknown+" of "+fileNamesUnknown.length);
                                       jLabelPoints.setBounds(800, 50, jLabelPoints.getWidth(), jLabelPoints.getHeight());
                                       
                                       
                                       waitVictory++;
                                       
                                       //System.out.println(waitVictory);
                                       if ((victoryAnimationFrame==0)&&(flagFinalAnimation)){
                                    	   timerTask2.cancel();
                                       }
                                       
               	     		} catch (Exception e) {
               	     			e.printStackTrace();
               	     		}
                                   
               	         } 
               	     }; 
                
               	     Timer timer2 = new Timer(); 
                     timer2.scheduleAtFixedRate(timerTask2, 0, 100);
                        
                        //jLabel1.setVisible(false);
                        
                    }else{
                        jLabelUnknown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/unknown/"+fileNamesUnknown[actualPositionUknown])));
                    }
                }
                
                jTextField1.setText("");
                jTextField1.requestFocus();
                
                actualPositionKnown=randInt(0, listKnown.length-1);
                jLabelKnown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/known/"+fileNamesKnown[actualPositionKnown])));
            
            }catch(IndexOutOfBoundsException e){
                JOptionPane.showMessageDialog(this,"You have to input two words.");
                jTextField1.setText("");
                jTextField1.requestFocus();
            }
        }
    }                                           

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {                                        
        
    }                                       

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // TODO add your handling code here:
    }                                        

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {                                      
        if (jButton2.isEnabled()){
            JFrame parentFrame = new JFrame();
 
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Specify a file to save");   
            FileNameExtensionFilter filter = new FileNameExtensionFilter("txt", "txt", "txt");
            fileChooser.setFileFilter(filter);
            int userSelection = fileChooser.showSaveDialog(parentFrame);
 
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                System.out.println("Save as file: " + fileToSave.getAbsolutePath()+".txt");
                pathToSave=fileToSave.getAbsolutePath()+".txt";
                jButton1.enable(true);
                jButton2.enable(false);
            }
        }
    }                                     

    public static int randInt(int min, int max) {
        Random rand = new Random();
        int randomNum = rand.nextInt((max - min) + 1) + min;
        return randomNum;
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HumanOCRGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HumanOCRGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HumanOCRGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HumanOCRGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HumanOCRGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelKnown;
    private javax.swing.JLabel jLabelPoints;
    private javax.swing.JLabel jLabelUnknown;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration                   
}
